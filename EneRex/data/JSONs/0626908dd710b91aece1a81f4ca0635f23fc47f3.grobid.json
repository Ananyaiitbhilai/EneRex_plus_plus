[
    {
        "basename": "0626908dd710b91aece1a81f4ca0635f23fc47f3.grobid",
        "fulltext": 14,
        "footnote_size": 0,
        "reference": 23,
        "authors": [
            "Szegedy",
            "Wojna"
        ]
    },
    {
        "title": "Rethinking the Inception Architecture for Computer Vision",
        "abstract": "Convolutional networks are at the core of most stateof-the-art computer vision solutions for a wide variety of tasks. Since 2014 very deep convolutional networks started to become mainstream, yielding substantial gains in various benchmarks. Although increased model size and computational cost tend to translate to immediate quality gains for most tasks (as long as enough labeled data is provided for training), computational efficiency and low parameter count are still enabling factors for various use cases such as mobile vision and big-data scenarios. Here we are exploring ways to scale up networks in ways that aim at utilizing the added computation as efficiently as possible by suitably factorized convolutions and aggressive regularization. We benchmark our methods on the ILSVRC 2012 classification challenge validation set demonstrate substantial gains over the state of the art: 21.2% top-1 and 5.6% top-5 error for single frame evaluation using a network with a computational cost of 5 billion multiply-adds per inference and with using less than 25 million parameters. With an ensemble of 4 models and multi-crop evaluation, we report 3.5% top-5 error and 17.3% top-1 error.",
        "Introduction": "Since the 2012 ImageNet competition  #b15  winning entry by Krizhevsky et al  #b8 , their network \"AlexNet\" has been successfully applied to a larger variety of computer vision tasks, for example to object-detection  #b4 , segmentation  #b11 , human pose estimation  #b21 , video classification  #b7 , object tracking  #b22 , and superresolution  #b2 .These successes spurred a new line of research that focused on finding higher performing convolutional neural networks. Starting in 2014, the quality of network architectures significantly improved by utilizing deeper and wider networks. VGGNet  #b17  and GoogLeNet  #b19  yielded simi-larly high performance in the 2014 ILSVRC  #b15  classification challenge. One interesting observation was that gains in the classification performance tend to transfer to significant quality gains in a wide variety of application domains. This means that architectural improvements in deep convolutional architecture can be utilized for improving performance for most other computer vision tasks that are increasingly reliant on high quality, learned visual features. Also, improvements in the network quality resulted in new application domains for convolutional networks in cases where AlexNet features could not compete with hand engineered, crafted solutions, e.g. proposal generation in detection  #b3 .Although VGGNet  #b17  has the compelling feature of architectural simplicity, this comes at a high cost: evaluating the network requires a lot of computation. On the other hand, the Inception architecture of GoogLeNet  #b19  was also designed to perform well even under strict constraints on memory and computational budget. For example, GoogleNet employed only 5 million parameters, which represented a 12\u00d7 reduction with respect to its predecessor AlexNet, which used 60 million parameters. Furthermore, VGGNet employed about 3x more parameters than AlexNet.The computational cost of Inception is also much lower than VGGNet or its higher performing successors  #b5 . This has made it feasible to utilize Inception networks in big-data scenarios  #b16 ,  #b12 , where huge amount of data needed to be processed at reasonable cost or scenarios where memory or computational capacity is inherently limited, for example in mobile vision settings. It is certainly possible to mitigate parts of these issues by applying specialized solutions to target memory use  #b1 ,  #b14  or by optimizing the execution of certain operations via computational tricks  #b9 . However, these methods add extra complexity. Furthermore, these methods could be applied to optimize the Inception architecture as well, widening the efficiency gap again.Still, the complexity of the Inception architecture makes it more difficult to make changes to the network. If the architecture is scaled up naively, large parts of the computational gains can be immediately lost. Also,  #b19  does not provide a clear description about the contributing factors that lead to the various design decisions of the GoogLeNet architecture. This makes it much harder to adapt it to new use-cases while maintaining its efficiency. For example, if it is deemed necessary to increase the capacity of some Inception-style model, the simple transformation of just doubling the number of all filter bank sizes will lead to a 4x increase in both computational cost and number of parameters. This might prove prohibitive or unreasonable in a lot of practical scenarios, especially if the associated gains are modest. In this paper, we start with describing a few general principles and optimization ideas that that proved to be useful for scaling up convolution networks in efficient ways. Although our principles are not limited to Inceptiontype networks, they are easier to observe in that context as the generic structure of the Inception style building blocks is flexible enough to incorporate those constraints naturally. This is enabled by the generous use of dimensional reduction and parallel structures of the Inception modules which allows for mitigating the impact of structural changes on nearby components. Still, one needs to be cautious about doing so, as some guiding principles should be observed to maintain high quality of the models.",
        "General Design Principles": "Here we will describe a few design principles based on large-scale experimentation with various architectural choices with convolutional networks. At this point, the utility of the principles below are speculative and additional future experimental evidence will be necessary to assess their accuracy and domain of validity. Still, grave deviations from these principles tended to result in deterioration in the quality of the networks and fixing situations where those deviations were detected resulted in improved architectures in general.1. Avoid representational bottlenecks, especially early in the network. Feed-forward networks can be represented by an acyclic graph from the input layer(s) to the classifier or regressor. This defines a clear direction for the information flow. For any cut separating the inputs from the outputs, one can access the amount of information passing though the cut. One should avoid bottlenecks with extreme compression. In general the representation size should gently decrease from the inputs to the outputs before reaching the final representation used for the task at hand. Theoretically, information content can not be assessed merely by the dimensionality of the representation as it discards important factors like correlation structure; the dimensional-ity merely provides a rough estimate of information content.2. Higher dimensional representations are easier to process locally within a network. Increasing the activations per tile in a convolutional network allows for more disentangled features. The resulting networks will train faster.3. Spatial aggregation can be done over lower dimensional embeddings without much or any loss in representational power. For example, before performing a more spread out (e.g. 3 \u00d7 3) convolution, one can reduce the dimension of the input representation before the spatial aggregation without expecting serious adverse effects. We hypothesize that the reason for that is the strong correlation between adjacent unit results in much less loss of information during dimension reduction, if the outputs are used in a spatial aggregation context. Given that these signals should be easily compressible, the dimension reduction even promotes faster learning.4. Balance the width and depth of the network. Optimal performance of the network can be reached by balancing the number of filters per stage and the depth of the network. Increasing both the width and the depth of the network can contribute to higher quality networks. However, the optimal improvement for a constant amount of computation can be reached if both are increased in parallel. The computational budget should therefore be distributed in a balanced way between the depth and width of the network.Although these principles might make sense, it is not straightforward to use them to improve the quality of networks out of box. The idea is to use them judiciously in ambiguous situations only.",
        "Factorizing Convolutions with Large Filter Size": "Much of the original gains of the GoogLeNet network  #b19  arise from a very generous use of dimension reduction. This can be viewed as a special case of factorizing convolutions in a computationally efficient manner. Consider for example the case of a 1 \u00d7 1 convolutional layer followed by a 3 \u00d7 3 convolutional layer. In a vision network, it is expected that the outputs of near-by activations are highly correlated. Therefore, we can expect that their activations can be reduced before aggregation and that this should result in similarly expressive local representations.Here we explore other ways of factorizing convolutions in various settings, especially in order to increase the computational efficiency of the solution. Since Inception networks are fully convolutional, each weight corresponds to one multiplication per activation. Therefore, any reduction in computational cost results in reduced number of parameters. This means that with suitable factorization, we can end up with more disentangled parameters and therefore with faster training. Also, we can use the computational and memory savings to increase the filter-bank sizes of our network while maintaining our ability to train each model replica on a single computer.",
        "Factorization into smaller convolutions": "Convolutions with larger spatial filters (e.g. 5 \u00d7 5 or 7 \u00d7 7) tend to be disproportionally expensive in terms of computation. For example, a 5 \u00d7 5 convolution with n filters over a grid with m filters is 25/9 = 2.78 times more computationally expensive than a 3 \u00d7 3 convolution with the same number of filters. Of course, a 5 \u00d7 5 filter can capture dependencies between signals between activations of units further away in the earlier layers, so a reduction of the geometric size of the filters comes at a large cost of expressiveness. However, we can ask whether a 5 \u00d7 5 convolution could be replaced by a multi-layer network with less parameters with the same input size and output depth. If we zoom into the computation graph of the 5 \u00d7 5 convolution, we see that each output looks like a small fully-connected network sliding over 5 \u00d7 5 tiles over its input (see Figure 1). Since we are constructing a vision network, it seems natural to exploit translation invariance again and replace the fully connected component by a two layer convolutional architecture: the first layer is a 3 \u00d7 3 convolution, the second is a fully connected layer on top of the 3 \u00d7 3 output grid of the first layer (see Figure 1). Sliding this small network over the input activation grid boils down to replacing the 5 \u00d7 5 convolution with two layers of 3 \u00d7 3 convolution (compare Figure 4 with 5).This setup clearly reduces the parameter count by sharing the weights between adjacent tiles. To analyze the ex- pected computational cost savings, we will make a few simplifying assumptions that apply for the typical situations:We can assume that n = \u03b1m, that is that we want to change the number of activations/unit by a constant alpha factor. Since the 5 \u00d7 5 convolution is aggregating, \u03b1 is typically slightly larger than one (around 1.5 in the case of GoogLeNet). Having a two layer replacement for the 5 \u00d7 5 layer, it seems reasonable to reach this expansion in two steps: increasing the number of filters by \u221a \u03b1 in both steps. In order to simplify our estimate by choosing \u03b1 = 1 (no expansion), If we would naivly slide a network without reusing the computation between neighboring grid tiles, we would increase the computational cost. sliding this network can be represented by two 3 \u00d7 3 convolutional layers which reuses the activations between adjacent tiles. This way, we end up with a net 9+9 25 \u00d7 reduction of computation, resulting in a relative gain of 28% by this factorization. The exact same saving holds for the parameter count as each parameter is used exactly once in the computation of the activation of each unit. Still, this setup raises two general questions: Does this replacement result in any loss of expressiveness? If our main goal is to factorize the linear part of the computation, would it not suggest to keep linear activations in the first layer? We have ran several control experiments (for example see figure 2) and using linear activation was always inferior to using rectified linear units in all stages of the factorization. We attribute this gain to the enhanced space of variations that the network can learn especially if we batchnormalize  #b6  the output activations. One can see similar effects when using linear activations for the dimension reduction components.",
        "Spatial Factorization into Asymmetric Convolutions": "The above results suggest that convolutions with filters larger 3 \u00d7 3 a might not be generally useful as they can always be reduced into a sequence of 3 \u00d7 3 convolutional layers. Still we can ask the question whether one should factorize them into smaller, for example 2 \u00d7 2 convolutions. However, it turns out that one can do even better than 2 \u00d7 2 by using asymmetric convolutions, e.g. n \u00d7 1. For example using a 3 \u00d7 1 convolution followed by a 1 \u00d7 3 convolution is equivalent to sliding a two layer network with the same receptive field as in a 3 \u00d7 3 convolution (see figure 3). Still the two-layer solution is 33% cheaper for the same number of output filters, if the number of input and output filters is equal. By comparison, factorizing a 3 \u00d7 3 convolution into a two 2 \u00d7 2 convolution represents only a 11% saving of computation.In theory, we could go even further and argue that one can replace any n \u00d7 n convolution by a 1 \u00d7 n convolu- tion followed by a n \u00d7 1 convolution and the computational cost saving increases dramatically as n grows (see figure 6).In practice, we have found that employing this factorization does not work well on early layers, but it gives very good results on medium grid-sizes (On m \u00d7 m feature maps, where m ranges between 12 and 20). On that level, very good results can be achieved by using 1 \u00d7 7 convolutions followed by 7 \u00d7 1 convolutions.",
        "Utility of Auxiliary Classifiers": "[20] has introduced the notion of auxiliary classifiers to improve the convergence of very deep networks. The original motivation was to push useful gradients to the lower layers to make them immediately useful and improve the convergence during training by combating the vanishing gradient problem in very deep networks. Also Lee et al  #b10  argues that auxiliary classifiers promote more stable learning and better convergence. Interestingly, we found that auxiliary classifiers did not result in improved convergence early in the training: the training progression of network with and without side head looks virtually identical before both models reach high accuracy. Near the end of training, the network with the auxiliary branches starts to overtake the accuracy of the network without any auxiliary branch and reaches a slightly higher plateau.Also  #b19  used two side-heads at different stages in the network. The removal of the lower auxiliary branch did not have any adverse effect on the final quality of the network. Together with the earlier observation in the previous para- . graph, this means that original the hypothesis of  #b19  that these branches help evolving the low-level features is most likely misplaced. Instead, we argue that the auxiliary classifiers act as regularizer. This is supported by the fact that the main classifier of the network performs better if the side branch is batch-normalized  #b6  or has a dropout layer. This also gives a weak supporting evidence for the conjecture that batch normalization acts as a regularizer.",
        "Efficient Grid Size Reduction": "Traditionally, convolutional networks used some pooling operation to decrease the grid size of the feature maps. In order to avoid a representational bottleneck, before applying maximum or average pooling the activation dimension of the network filters is expanded. For example, starting a d \u00d7 d grid with k filters, if we would like to arrive at a d 2 \u00d7 d 2 grid with 2k filters, we first need to compute a stride-1 convolution with 2k filters and then apply an additional pooling step. This means that the overall computational cost is dominated by the expensive convolution on the larger grid using 2d 2 k 2 operations. One possibility would be to switch to pooling with convolution and therefore resulting in 2( This architecture is used on the coarsest (8 \u00d7 8) grids to promote high dimensional representations, as suggested by principle 2 of Section 2. We are using this solution only on the coarsest grid, since that is the place where producing high dimensional sparse representation is the most critical as the ratio of local processing (by 1 \u00d7 1 convolutions) is increased compared to the spatial aggregation.  reducing the computational cost by a quarter. However, this creates a representational bottlenecks as the overall dimensionality of the representation drops to ( d 2 ) 2 k resulting in less expressive networks (see Figure 9). Instead of doing so, we suggest another variant the reduces the computational cost even further while removing the representational bottleneck. (see Figure 10). We can use two parallel stride 2 blocks: P and C. P is a pooling layer (either average or maximum pooling) the activation, both of them are stride 2 the filter banks of which are concatenated as in figure 10. ",
        "Inception-v2": "Here we are connecting the dots from above and propose a new architecture with improved performance on the ILSVRC 2012 classification benchmark. The layout of our network is given in table 1. Note that we have factorized the traditional 7 \u00d7 7 convolution into three 3 \u00d7 3 convolutions based on the same ideas as described in section 3.1. For the Inception part of the network, we have 3 traditional inception modules at the 35 \u00d7 35 with 288 filters each. This is reduced to a 17 \u00d7 17 grid with 768 filters using the grid reduction technique described in section 5. This is is followed by 5 instances of the factorized inception modules as depicted in figure 5. This is reduced to a 8 \u00d7 8 \u00d7 1280 grid with the grid reduction technique depicted in figure 10. At the coarsest 8 \u00d7 8 level, we have two Inception modules as depicted in figure 6, with a concatenated output filter bank size of 2048 for each tile. The detailed structure of the network, including the sizes of filter banks inside the Inception modules, is given in the supplementary material, given in the model.txt that is in the tar-file of this submission. conv 3\u00d73/2 299\u00d7299\u00d73 conv 3\u00d73/1 149\u00d7149\u00d732 conv padded 3\u00d73/1 147\u00d7147\u00d732 pool 3\u00d73/2 147\u00d7147\u00d764 conv 3\u00d73/1 73\u00d773\u00d764 conv 3\u00d73/2 71\u00d771\u00d780 conv 3\u00d73/1 35\u00d735\u00d7192 3\u00d7InceptionAs in figure 5 35\u00d735\u00d7288 5\u00d7InceptionAs in figure 6 17\u00d717\u00d7768 2\u00d7InceptionAs in figure 78\u00d78\u00d71280 pool 8 \u00d7 8 8 \u00d7 8 \u00d7 2048 linear logits 1 \u00d7 1 \u00d7 2048 softmax classifier 1 \u00d7 1 \u00d7 1000Table 1. The outline of the proposed network architecture. The output size of each module is the input size of the next one. We are using variations of reduction technique depicted Figure 10 to reduce the grid sizes between the Inception blocks whenever applicable. We have marked the convolution with 0-padding, which is used to maintain the grid size. 0-padding is also used inside those Inception modules that do not reduce the grid size. All other layers do not use padding. The various filter bank sizes are chosen to observe principle 4 from Section 2.However, we have observed that the quality of the network is relatively stable to variations as long as the principles from Section 2 are observed. Although our network is 42 layers deep, our computation cost is only about 2.5 higher than that of GoogLeNet and it is still much more efficient than VGGNet.",
        "Model Regularization via Label Smoothing": "Here we propose a mechanism to regularize the classifier layer by estimating the marginalized effect of label-dropout during training.For each training example x, our model computes the probability of each label k \u2208 {1 . . . K}: p(k|x) = exp(z k ) K i=1 exp(zi) . Here, z i are the logits or unnormalized logprobabilities. Consider the ground-truth distribution over labels q(k|x) for this training example, normalized so that k q(k|x) = 1. For brevity, let us omit the dependence of p and q on example x. We define the loss for the example as the cross entropy: = -K k=1 log(p(k))q(k). Minimizing this is equivalent to maximizing the expected log-likelihood of a label, where the label is selected according to its ground-truth distribution q(k). Cross-entropy loss is differentiable with respect to the logits z k and thus can be used for gradient training of deep models. The gradient has a rather simple form: \u2202 \u2202z k = p(k) -q(k), which is bounded between -1 and 1.Consider the case of a single ground-truth label y, so that q(y) = 1 and q(k) = 0 for all k = y. In this case, minimizing the cross entropy is equivalent to maximizing the log-likelihood of the correct label. For a particular example x with label y, the log-likelihood is maximized for q(k) = \u03b4 k,y , where \u03b4 k,y is Dirac delta, which equals 1 for k = y and 0 otherwise. This maximum is not achievable for finite z k but is approached if z y z k for all k = y -that is, if the logit corresponding to the ground-truth label is much great than all other logits. This, however, can cause two problems. First, it may result in over-fitting: if the model learns to assign full probability to the groundtruth label for each training example, it is not guaranteed to generalize. Second, it encourages the differences between the largest logit and all others to become large, and this, combined with the bounded gradient \u2202 \u2202z k , reduces the ability of the model to adapt. Intuitively, this happens because the model becomes too confident about its predictions.We propose a mechanism for encouraging the model to be less confident. While this may not be desired if the goal is to maximize the log-likelihood of training labels, it does regularize the model and makes it more adaptable. The method is very simple. Consider a distribution over labels u(k), independent of the training example x, and a smoothing parameter . For a training example with ground-truth label y, we replace the label distribution q(k|x) = \u03b4 k,y withq (k|x) = (1 -)\u03b4 k,y + u(k)which is a mixture of the original ground-truth distribution q(k|x) and the fixed distribution u(k), with weights 1and , respectively. This can be seen as the distribution of the label k obtained as follows: first, set it to the groundtruth label k = y; then, with probability , replace k with a sample drawn from the distribution u(k). We propose to use the prior distribution over labels as u(k). In our experiments, we used the uniform distribution u(k) = 1/K, so that q (k) = (1 -)\u03b4 k,y + K .We refer to this change in ground-truth label distribution as label-smoothing regularization, or LSR. Note that LSR achieves the desired goal of preventing the largest logit from becoming much larger than all others. Indeed, if this were to happen, then a single q(k) would approach 1 while all others would approach 0. This would result in a large cross-entropy with q (k) because, unlike q(k) = \u03b4 k,y , all q (k) have a positive lower bound.Another interpretation of LSR can be obtained by considering the cross entropy:H(q , p) = - K k=1 log p(k)q (k) = (1-)H(q, p)+ H(u, p)Thus, LSR is equivalent to replacing a single cross-entropy loss H(q, p) with a pair of such losses H(q, p) and H(u, p).The second loss penalizes the deviation of predicted label distribution p from the prior u, with the relative weight 1-. Note that this deviation could be equivalently captured by the KL divergence, since H(u, p) = D KL (u p) + H(u) and H(u) is fixed. When u is the uniform distribution, H(u, p) is a measure of how dissimilar the predicted distribution p is to uniform, which could also be measured (but not equivalently) by negative entropy -H(p); we have not experimented with this approach.In our ImageNet experiments with K = 1000 classes, we used u(k) = 1/1000 and = 0.1. For ILSVRC 2012, we have found a consistent improvement of about 0.2% absolute both for top-1 error and the top-5 error (cf. Table 3).",
        "Training Methodology": "We have trained our networks with stochastic gradient utilizing the TensorFlow [1] distributed machine learning system using 50 replicas running each on a NVidia Kepler GPU with batch size 32 for 100 epochs. Our earlier experiments used momentum  #b18  with a decay of 0.9, while our best models were achieved using RMSProp  #b20  with decay of 0.9 and = 1.0. We used a learning rate of 0.045, decayed every two epoch using an exponential rate of 0.94. In addition, gradient clipping  #b13  with threshold 2.0 was found to be useful to stabilize the training. Model evaluations are performed using a running average of the parameters computed over time.",
        "Performance on Lower Resolution Input": "A typical use-case of vision networks is for the the postclassification of detection, for example in the Multibox  #b3  context. This includes the analysis of a relative small patch of the image containing a single object with some context. The tasks is to decide whether the center part of the patch corresponds to some object and determine the class of the object if it does. The challenge is that objects tend to be relatively small and low-resolution. This raises the question of how to properly deal with lower resolution input.The common wisdom is that models employing higher resolution receptive fields tend to result in significantly improved recognition performance. However it is important to distinguish between the effect of the increased resolution of the first layer receptive field and the effects of larger model capacitance and computation. If we just change the resolution of the input without further adjustment to the model, then we end up using computationally much cheaper models to solve more difficult tasks. Of course, it is natural, that these solutions loose out already because of the reduced computational effort. In order to make an accurate assessment, the model needs to analyze vague hints in order to be able to \"hallucinate\" the fine details. This is computationally costly. The question remains therefore: how much Table 5. Ensemble evaluation results comparing multi-model, multi-crop reported results. Our numbers are compared with the best published ensemble inference results on the ILSVRC 2012 classification benchmark. * All results, but the top-5 ensemble result reported are on the validation set. The ensemble yielded 3.46% top-5 error on the validation set.",
        "Conclusions": "We have provided several design principles to scale up convolutional networks and studied them in the context of the Inception architecture. This guidance can lead to high performance vision networks that have a relatively modest computation cost compared to simpler, more monolithic architectures. Our highest quality version of Inception-v3 reaches 21.2%, top-1 and 5.6% top-5 error for single crop evaluation on the ILSVR 2012 classification, setting a new state of the art. This is achieved with relatively modest (2.5\u00d7) increase in computational cost compared to the network described in Ioffe et al  #b6 . Still our solution uses much less computation than the best published results based on denser networks: our model outperforms the results of He et al  #b5  -cutting the top-5 (top-1) error by 25% (14%) relative, respectively -while being six times cheaper computationally and using at least five times less parameters (estimated). Our ensemble of four Inception-v3 models reaches 3.5% with multi-crop evaluation reaches 3.5% top-5 error which represents an over 25% reduction to the best published results and is almost half of the error of ILSVRC 2014 winining GoogLeNet ensemble.We have also demonstrated that high quality results can be reached with receptive field resolution as low as 79 \u00d7 79. This might prove to be helpful in systems for detecting relatively small objects. We have studied how factorizing convolutions and aggressive dimension reductions inside neural network can result in networks with relatively low computational cost while maintaining high quality. The combination of lower parameter count and additional regularization with batch-normalized auxiliary classifiers and label-smoothing allows for training high quality networks on relatively modest sized training sets."
    },
    {},
    {
        "b0": [
            "",
            "",
            "",
            ""
        ],
        "b1": [
            "Compressing neural networks with the hashing trick",
            "",
            "",
            "",
            "Chen",
            "Wilson",
            "Tyree",
            "Weinberger",
            "Chen"
        ],
        "b2": [
            "Learning a deep convolutional network for image super-resolution",
            "",
            "",
            "",
            "Dong",
            "Loy",
            "He",
            "Tang"
        ],
        "b3": [
            "Scalable object detection using deep neural networks",
            "",
            "",
            "",
            "Erhan",
            "Szegedy",
            "Toshev",
            "Anguelov"
        ],
        "b4": [
            "Rich feature hierarchies for accurate object detection and semantic segmentation",
            "",
            "",
            "",
            "Girshick",
            "Donahue",
            "Darrell",
            "Malik"
        ],
        "b5": [
            "",
            "",
            "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification",
            ""
        ],
        "b6": [
            "Batch normalization: Accelerating deep network training by reducing internal covariate shift",
            "",
            "",
            "",
            "Ioffe",
            "Szegedy"
        ],
        "b7": [
            "Large-scale video classification with convolutional neural networks",
            "",
            "",
            "",
            "Karpathy",
            "Toderici",
            "Shetty",
            "Leung",
            "Sukthankar",
            "Fei-Fei"
        ],
        "b8": [
            "Imagenet classification with deep convolutional neural networks",
            "",
            "",
            "",
            "Krizhevsky",
            "Sutskever",
            "Hinton"
        ],
        "b9": [
            "",
            "",
            "Fast algorithms for convolutional neural networks",
            ""
        ],
        "b10": [
            "",
            "",
            "Deeplysupervised nets",
            ""
        ],
        "b11": [
            "Fully convolutional networks for semantic segmentation",
            "",
            "",
            "",
            "Long",
            "Shelhamer",
            "Darrell"
        ],
        "b12": [
            "Ontological supervision for fine grained classification of street view storefronts",
            "",
            "",
            "",
            "Movshovitz-Attias",
            "Yu",
            "Stumpe",
            "Shet",
            "Arnoud",
            "Yatziv"
        ],
        "b13": [
            "",
            "",
            "On the difficulty of training recurrent neural networks",
            ""
        ],
        "b14": [
            "Svd-net: an algorithm that automatically selects network structure",
            "",
            "",
            "",
            "Psichogios",
            "Ungar"
        ],
        "b15": [
            "",
            "",
            "Imagenet large scale visual recognition challenge",
            ""
        ],
        "b16": [
            "",
            "",
            "Facenet: A unified embedding for face recognition and clustering",
            ""
        ],
        "b17": [
            "",
            "",
            "Very deep convolutional networks for large-scale image recognition",
            ""
        ],
        "b18": [
            "On the importance of initialization and momentum in deep learning",
            "",
            "",
            "",
            "Sutskever",
            "Martens",
            "Dahl",
            "Hinton"
        ],
        "b19": [
            "Going deeper with convolutions",
            "",
            "",
            "",
            "Szegedy",
            "Liu",
            "Jia",
            "Sermanet",
            "Reed",
            "Anguelov",
            "Erhan",
            "Vanhoucke",
            "Rabinovich"
        ],
        "b20": [
            "Divide the gradient by a running average of its recent magnitude",
            "",
            "",
            "",
            "Tieleman",
            "Hinton"
        ],
        "b21": [
            "Deeppose: Human pose estimation via deep neural networks",
            "",
            "",
            "",
            "Toshev",
            "Szegedy"
        ],
        "b22": [
            "Learning a deep compact image representation for visual tracking",
            "",
            "",
            "",
            "Wang",
            "Yeung"
        ]
    },
    {}
]