[
    {
        "basename": "38e2f851b705faa0d0a698ed9885bd6834440073.grobid",
        "fulltext": 10,
        "footnote_size": 2,
        "footnote_max": 3,
        "reference": 41,
        "authors": [
            "Finn",
            "Xu",
            "Levine",
            "Berkeley"
        ]
    },
    {
        "title": "Probabilistic Model-Agnostic Meta-Learning",
        "abstract": "Meta-learning for few-shot learning entails acquiring a prior over previous tasks and experiences, such that new tasks be learned from small amounts of data. However, a critical challenge in few-shot learning is task ambiguity: even when a powerful prior can be meta-learned from a large number of prior tasks, a small dataset for a new task can simply be too ambiguous to acquire a single model (e.g., a classifier) for that task that is accurate. In this paper, we propose a probabilistic meta-learning algorithm that can sample models for a new task from a model distribution. Our approach extends model-agnostic meta-learning, which adapts to new tasks via gradient descent, to incorporate a parameter distribution that is trained via a variational lower bound. At meta-test time, our algorithm adapts via a simple procedure that injects noise into gradient descent, and at meta-training time, the model is trained such that this stochastic adaptation procedure produces samples from the approximate model posterior. Our experimental results show that our method can sample plausible classifiers and regressors in ambiguous few-shot learning problems.",
        "Introduction": "Learning from a few examples is a key aspect of human intelligence. One way to make it possible to acquire solutions to complex tasks from only a few examples is to leverage past experience to learn a prior over tasks. The process of learning this prior entails discovering the shared structure across different tasks from the same family, such as commonly occurring visual features or semantic cues. Structure is useful insofar as it yields efficient learning of new tasks -a mechanism known as learning-to-learn, or meta-learning  #b2 . However, when the end goal of few-shot meta-learning is to learn solutions to new tasks from small amounts of data, a critical issue that must be dealt with is task ambiguity: even with the best possible prior, there might simply not be enough information in the examples for a new task to resolve that task with high certainty. It is therefore quite desireable to develop few-shot meta-learning methods that can propose multiple potential solutions to an ambiguous few-shot learning problem. Such a method could be used to evaluate uncertainty (by measuring agreement between the samples), perform active learning, or elicit direct human supervision about which sample is preferable. For example, in safety-critical applications, such as few-shot medical image classification, uncertainty is crucial for determining if the learned classifier should be trusted. When learning from such small amounts of data, uncertainty estimation can also help predict if additional data would be beneficial for learning and improving the estimate of the rewards. Finally, while we do not experiment with this in this paper, we expect that modeling this ambiguity will be helpful for reinforcement learning problems, where it can be used to aid in exploration.While recognizing and accounting for ambiguity is an important aspect of the few-shot learning problem, it is particularly challenging to model when scaling to high-dimensional data, large function approximators, and multimodal task structure. Representing distributions over functions is relatively straightforward when using simple function approximators, such as linear functions, and has been done extensively in early few-shot learning approaches using Bayesian models  #b36  #b6 . But this problem becomes substantially more challenging when reasoning over high-dimensional function approximators such as deep neural networks, since explicitly representing expressive distributions over thousands or millions of parameters if often intractable. As a result, recent more scalable approaches to few-shot learning have focused on acquiring deterministic learning algorithms that disregard ambiguity over the underlying function. Can we develop an approach that has the benefits of both classes of few-shot learning methods -scalability and uncertainty awareness? To do so, we build upon tools in amortized variational inference for developing a probabilistic meta-learning approach.In particular, our method builds on model-agnostic meta-learning (MAML)  #b8 , a few shot metalearning algorithm that uses standard gradient descent to adapt the model at meta-test time to a new few-shot task, and trains the model parameters at meta-training time to enable rapid adaptation, essentially optimizing for a neural network initialization that is well-suited for few shot learning. MAML can be shown to retain the generality of black-box meta-learners such as RNNs  #b7 , while being applicable to standard neural network architectures. Our approach extends MAML to model a distribution over prior model parameters, which leads to an appealing simple stochastic adaptation procedure that simply injects noise into gradient descent at meta-test time. The meta-training procedure then optimizes for this simple inference process to produce samples from an approximate model posterior.The primary contribution of this paper is a reframing of MAML as a graphical model inference problem, where variational inference can provide us with a principled and natural mechanism for modeling uncertainty and ambiguity. Our approach enables sampling multiple potential solutions to a few-shot learning problem at meta-test time, and our experiments show that this ability can be utilized to sample multiple possible regressors for an ambiguous regression problem, as well as multiple possible classifiers for ambiguous few-shot attribute classification tasks.",
        "Related Work": "Hierarchical Bayesian models are a long-standing approach for few-shot learning that naturally allow for the ability to reason about uncertainty over functions  #b36  #b6  #b22  #b40  #b10  #b3  #b38 . While these approaches have been demonstrated on simple few-shot image classification datasets  #b21 , they have yet to scale to the more complex problems, such as the experiments in this paper. A number of works have approached the problem of few-shot learning from a meta-learning perspective  #b32  #b16 , including black-box  #b30  #b4  #b39  and optimization-based approaches  #b28  #b8 . While these approaches scale to large-scale image datasets  #b37  and visual reinforcement learning problems  #b25 , they typically lack the ability to reason about uncertainty.Our work is most related to methods that combine deep networks and probabilistic methods for few-shot learning  #b5  #b13  #b20 . One approach that considers hierarchical Bayesian models for few-shot learning is the neural statistician  #b5 , which uses an explicit task variable to model task distributions. Our method is fully model agnostic, and directly samples model weights for each task for any network architecture. Our experiments show that our approach improves on MAML  #b8 , which outperforms the model by Edwards and Storkey  #b5 . Other work that considers model uncertainty in the few-shot learning setting is the LLAMA method  #b13 , which also builds on the MAML algorithm. LLAMA makes use of a local Laplace approximation for modeling the task parameters (post-update parameters), which introduces the need to approximate a high dimensional covariance matrix. We instead propose a method that approximately infers the pre-update parameters, which we make tractable through a choice of approximate posterior parameterized by gradient operations.Bayesian neural networks  #b24  #b15  #b26  #b0  have been studied extensively as a way to incorporate uncertainty into deep networks. Although exact inference in Bayesian neural networks is impractical, approximations based on backpropagation and sampling  #b14  #b29  #b17  #b1  have been effective in incorporating uncertainty into the weights of generic networks. Our approach differs from these methods in that we explicitly train a hierarchical Bayesian model over weights, where a posterior task-specific parameter distribution is inferred at meta-test time conditioned on a learned weight prior and a (few-shot) training set, while conventional Bayesian neural networks directly learn only the posterior weight distribution for a single task. Our method draws on amortized variational inference methods  #b19  #b18  #b33  to make this possible, but the key modification is that the model and inference networks share the same parameters. The resulting method corresponds structurally to a Bayesian version of model-agnostic meta-learning  #b8 . Figure 1: Graphical models corresponding to our approach. The original graphical model (left) is transformed into the center model after performing inference over \u03c6i. We find it beneficial to introduce additional dependencies of the prior on the training data to compensate for using the MAP estimate to approximate p(\u03c6i), as shown on the right.",
        "Preliminaries": "In the meta-learning problem setting that we consider, the goal is to learn models that can learn new tasks from small amounts of data. To do so, meta-learning algorithms require a set of meta-training and meta-testing tasks drawn from some distribution p(T ). The key assumption of learning-to-learn is that the tasks in this distribution share common structure that can be exploited for faster learning of new tasks. Thus, the goal of the meta-learning process is to discover that structure. In this section, we will introduce notation and overview the model-agnostic meta-learning (MAML) algorithm  #b8 .Meta-learning algorithms proceed by sampling data from a given task, and splitting the sampled data into a set of a few datapoints, D tr used for training the model and a set of datapoints for measuring whether or not training was effective, D test . This second dataset is used to measure few-shot generalization drive meta-training of the learning procedure. The MAML algorithm trains for few-shot generalization by optimizing for a set of initial parameters \u03b8 such that one or a few steps of gradient descent on D tr achieves good performance on D test . Specifically, MAML performs the following optimization:min \u03b8 Ti\u223cp(T ) L(\u03b8 -\u03b1\u2207 \u03b8 L(\u03b8, D tr Ti ), D test Ti ) = min \u03b8 Ti\u223cp(T ) L(\u03c6 i , D test Ti )where \u03c6 i is used to denote the parameters updated by gradient descent and where the loss corresponds to negative log likelihood of the data. In particular, in the case of supervised classification with inputs {x j }, their corresponding labels {y j }, and a classifier f \u03b8 , we will denote the negative log likelihood of the data under the classifier as L(\u03b8, D) = -(xj ,yj )\u2208D log p(y j |x j , \u03b8). This corresponds to the cross entropy loss function.",
        "Method": "Our goal is to build a meta-learning method that can handle the uncertainty and ambiguity that occurs when learning from small amounts of data, while scaling to highly-expressive function approximators such as neural networks. To do so, we set up a graphical model for the few-shot learning problem.In particular, we want a hierarchical Bayesian model that includes random variables for the prior distribution over function parameters, \u03b8, the distribution over parameters for a particular task, \u03c6 i , and the task training and test datapoints. This graphical model is illustrated in Figure 1 (left), where tasks are indexed over i and datapoints are indexed over j. We will use the shorthand x tr i , y ",
        "Gradient-Based Meta-Learning with Variational Inference": "In the graphical model in Figure 1, the predictions for each task are determined by the task-specific model parameters \u03c6 i . At meta-test time, these parameters are influenced by the prior p(\u03c6 i |\u03b8), as well as by the observed training data x tr , y tr . The test inputs x test are also observed, but the test outputs y test , which need to be predicted, are not observed. Note that \u03c6 i is thus independent of x test , but not of x tr , y tr . Therefore, posterior inference over \u03c6 i must take into account both the evidence (training set) and the prior imposed by p(\u03b8) and p(\u03c6 i |\u03b8). Conventional MAML can be interpreted as approximating maximum a posteriori inference under a simplified model where p(\u03b8) is a delta function, and inference is performed by running gradient descent on log p(y tr |x tr , \u03c6 i ) for a fixed number of iterations starting from \u03c6 0 i = E[\u03b8]  #b13 . The corresponding distribution p(\u03c6 i |\u03b8) is approximately Gaussian, with a mean that depends on the step size and number of gradient steps. When p(\u03b8) is not deterministic, we must make a further approximation to account for the random variable \u03b8.One way we can do this is by using structured variational inference. In structured variational inference, we approximate the distribution over the hidden variables \u03b8 and \u03c6 i for each task with some approximate distribution q i (\u03b8, \u03c6 i ). There are two reasonable choices we can make for q i (\u03b8, \u03c6 i ). First, we can approximate it as a product of independent marginals, according to q i (\u03b8, \u03c6 i ) = q i (\u03b8)q i (\u03c6 i ). However, this approximation does not permit uncertainty to propagate effectively from \u03b8 to \u03c6 i . A more expressive approximation is the structured variational approximation q i (\u03b8, \u03c6 i ) = q i (\u03b8)q i (\u03c6 i |\u03b8). We can further avoid storing a separate variational distribution q i (\u03c6 i |\u03b8) and q i (\u03b8) for each task T i by employing an amortized variational inference technique  #b19  #b18  #b33 , where we instead setq i (\u03c6 i |\u03b8) = q \u03c8 (\u03c6 i |\u03b8, x tr i , y tr i , x test i , y test i ), where q \u03c8 is defined by some function approximator with parameters \u03c8 that takes x tr i , y tr i as input, and the same q \u03c8 is used for all tasks. Similarly, we can define q i (\u03b8) as q \u03c8 (\u03b8|x tr i , y tr i , x test i , y test i ). We can now write down the variational lower bound on the log-likelihood aslog p(y test i |x test i , x tr i , y tr i ) \u2265 E \u03b8,\u03c6i\u223cq \u03c8 log p(y tr i |x tr i , \u03c6 i )+log p(y test i |x test i , \u03c6 i )+log p(\u03c6 i |\u03b8)+log p(\u03b8) + H(q \u03c8 (\u03c6 i |\u03b8, x tr i , y tr i , x test i , y test i )) + H(q \u03c8 (\u03b8|x tr i , y tr i , x test i , y test i )). The likelihood terms on the first line can be evaluated efficiently: given a sample \u03b8, \u03c6 i \u223c q(\u03b8, \u03c6 i |x tr i , y tr i , x test i , y test i ), the training and test likelihoods simply correspond to the loss of the network with parameters \u03c6 i . The prior p(\u03b8) can be chosen to be Gaussian, with a learned mean and (diagonal) covariance to provide for flexibility to choose the prior parameters. This corresponds to a Bayesian version of the MAML algorithm. We will define these parameters as \u00b5 \u03b8 and \u03c32 \u03b8 . Lastly, p(\u03c6 i |\u03b8) must be chosen. This choice is more delicate. One way to ensure a tractable likelihood is to use a Gaussian with mean \u03b8. This choice is reasonable, because it encourages \u03c6 i to stay close to the prior parameters \u03c6 i , but we will see in the next section how a more expressive implicit conditional can be obtained using gradient descent, resulting in a procedure that more closely resembles the original MAML algorithm while still modeling the uncertainty. Lastly, we must choose a form for the inference networks q \u03c8 (\u03c6 i |\u03b8, x tr i , y tr i , x test i , y test i ) and q \u03c8 (\u03b8|x tr i , y tr i , x test i , y test i ). They must be chosen so that their entropies on the second line of the above equation are tractable. Furthermore, note that both of these distributions model very high-dimensional random variables: a deep neural network can have hundreds of thousands or millions of parameters. So while we can use an arbitrary function approximator, we would like to find a scalable solution.One convenient solution is to allow q \u03c8 to reuse the learned mean of the prior \u00b5 \u03b8 . We observe that adapting the parameters with gradient descent is a good way to update them to a given training set x tr i , y tr i and test set x test i , y test i , and propose an inference network of the form q \u03c8 (\u03b8|x tr i , y tr i ,x test i , y test i ) = N (\u00b5 \u03b8 + \u03b3 q \u2207 \u00b5 \u03b8 log p(y tr i |x tr i , \u00b5 \u03b8 ) + \u03b3 q \u2207 \u00b5 \u03b8 log p(y test i |x test i , \u00b5 \u03b8 ); v q ), where v q is a learned (diagonal) covariance, and the mean has an additional parameter beyond \u00b5 \u03b8 , which is a \"learning rate\" vector \u03b3 q that is pointwise multiplied with the gradient. While this choice may at first seem arbitrary, there is a simple intuition: the inference network should produce a sample of \u03b8 that is close to the posterior p(\u03b8|x tr i , y tr i , x test i , y test i ). A reasonable way to arrive at a value of \u03b8 close to this posterior is to adapt it to both the training set and test set. 2 Note that this is only done during meta-training. It remains to choose q \u03c8 (\u03c6 i |\u03b8, x tr i , y tr i , x test i , y test i ), which can also be formulated as a conditional Gaussian with mean given by applying gradient descent.Although this variational distribution is substantially more compact in terms of parameters than a separate neural network, it only provides estimates of the posterior during meta-training. At meta-test time, we must obtain the posterior p(\u03c6 i |x tr i , y tr i , x test i ), without access to y test i . We can train a separate set of inference networks to perform this operation, potentially also using gradient descent within the inference network. However, these networks do not receive any gradient information during meta-training, and may not work well in practice. In the next section we propose an even simpler and more practical approach that uses only a single inference network during meta-training, and none during meta-testing.",
        "Algorithm 1 Meta-training, differences from MAML in red": "Require: p(T ): distribution over tasks 1: initialize \u0398 := {\u00b5 \u03b8 , \u03c3 2 \u03b8 , vq, \u03b3p, \u03b3q} 2: while not done do 3:Sample batch of tasks Ti \u223c p(T ) 4:for all Ti do 5:D tr , D test = Ti 6:Evaluate\u2207\u00b5 \u03b8 L(\u00b5 \u03b8 , D test ) 7: Sample \u03b8 \u223c q = N (\u00b5 \u03b8 -\u03b3q\u2207\u00b5 \u03b8 L(\u00b5 \u03b8 , D test ), vq) 8:Evaluate \u2207 \u03b8 L(\u03b8, D tr ) 9:Compute adapted parameters with gradient descent: \u03c6i = \u03b8 -\u03b1\u2207 \u03b8 L(\u03b8, D tr ) 10: Let p(\u03b8|D tr ) = N (\u00b5 \u03b8 -\u03b3p\u2207\u00b5 \u03b8 L(\u00b5 \u03b8 , D tr ), \u03c32i ) = p(y test i |x test i , \u03c6 i )p(\u03c6 i |x tr i , y tr i , \u03b8)d\u03c6 i \u2248 p(y test i |x test i , \u03c6 i ),(1)where we use the maximum a posteriori (MAP) value \u03c6 i . It can be shown that, for likelihoods that are Gaussian in \u03c6 i , gradient descent for a fixed number of iterations using x tr i , y tr i corresponds exactly to maximum a posteriori inference under a Gaussian prior p(\u03c6 i |\u03b8)  #b31 . In the case of non-Gaussian likelihoods, the equivalence is only locally approximate, and the exact form of the prior p(\u03c6 i |\u03b8) is intractable. However, in practice this implicit prior can actually be preferable to an explicit (and simple) Gaussian prior, since it incorporates the rich nonlinear structure of the neural network parameter manifold, and produces good performance in practice  #b8  #b13 . We can interpret this MAP approximation as inferring an approximate posterior on \u03c6 i of the form p(\u03c6 i |x tr i , y tr i , \u03b8) \u2248 \u03b4(\u03c6 i = \u03c6 i ), where \u03c6 i is obtained via gradient descent on the training set x tr i , y tr i starting from \u03b8. Incorporating this approximate inference procedure transforms the graphical model in Figure 1 (a) into the one in Figure 1 (b), where there is now a factor over p(\u03c6 i |x tr i , y tr i , \u03b8). While this is a crude approximation to the likelihood, it provides us with an empirically effective and simple tool that greatly simplifies the variational inference procedure described in the previous section, in the case where we aim to model a distribution over the global parameters p(\u03b8). After using gradient descent to estimate p(\u03c6 i | x tr i , y tr i , \u03b8), the graphical model is transformed into the model shown in the center of Figure 1. Note that, in this new graphical model, the global parameters \u03b8 are independent of x tr and y tr and are independent of x test when y test is not observed. Thus, we can now write down a variational lower bound for the logarithm of the approximate likelihood on the second line, which is given bylog p(y test i |x test i , x tr i , y tr i ) \u2265 E \u03b8\u223cq \u03c8 log p(y test i |x test i , \u03c6 i ) + log p(\u03b8) + H(q \u03c8 (\u03b8|x test i , y test i )).In this bound, we essentially perform approximate inference via MAP on \u03c6 i to obtain p(\u03c6 i |x tr i , y tr i , \u03b8), and use the variational distribution for \u03b8 only. Note that q \u03c8 (\u03b8|x test i , y test i ) is not conditioned on the training set x tr i , y tr i since \u03b8 is independent of it in the transformed graphical model. Analogously to the previous section, the inference network is given by q \u03c8 (\u03b8|x test i , y test i ) = N (\u00b5 \u03b8 + \u03b3 q \u2207 log p(y test i |x test i , \u00b5 \u03b8 ); v q ). To evaluate the variational lower bound during training, we can use the following procedure: first, we evaluate the mean by starting from \u00b5 \u03b8 and taking one (or more) gradient steps on log p(y test i |x test i , \u03b8 current ), where \u03b8 current starts at \u00b5 \u03b8 . We then add noise with variance v q , which is made differentiable via the reparameterization trick  #b19 . We then take additional gradient steps on the training likelihood log p(y tr i |x tr i , \u03b8 current ). This accounts for the MAP inference procedure on \u03c6 i . Training of \u00b5 \u03b8 , \u03c3 2 \u03b8 , and v q is performed by backpropagating gradients through this entire procedure with respect to the variational lower bound, which includes a term for the likelihood log p(y test i |x test i , x tr , y tr , \u03c6 i ) and the KL-divergence between the sample \u03b8 \u223c q \u03c8 and the prior p(\u03b8). This meta-training procedure is detailed in Algorithm 1.At meta-test time, the inference procedure is much simpler. The test labels are not available, so we simply sample \u03b8 \u223c p(\u03b8) and perform MAP inference on \u03c6 i using the training set, which corresponds to gradient steps on log p(y tr i |x tr i , \u03b8 current ), where \u03b8 current starts at the sampled \u03b8. This meta-testing procedure is detailed in Algorithm 2.",
        "Adding Additional Dependencies": "In the transformed graphical model, the training data x tr i , y tr i and the prior \u03b8 are conditionally independent. However, since we have only a crude approximation to p(\u03c6 i | x tr i , y tr i , \u03b8), this independence often doesn't actually hold. We can allow the model to compensate for this approximation by additionally conditioning the learned prior p(\u03b8) on the training data. In this case, the learned \"prior\" has the form p(\u03b8 i |x tr i , y tr i ), where \u03b8 i is now task-specific, but with global parameters \u00b5 \u03b8 and \u03c3 2 \u03b8 . We thus obtain the modified graphical model in Figure 1 (c). Similarly to the inference network q \u03c8 , we parameterize the learned prior as follows:p(\u03b8 i |x tr i , y tr i ) = N (\u00b5 \u03b8 + \u03b3 p \u2207 log p(y tr i |x tr i , \u00b5 \u03b8 ); \u03c3 2 \u03b8 ).With this new form for distribution over \u03b8, the variational training objective uses the likelihood term log p(\u03b8 i |x tr i , y tr i ) in place of log p(\u03b8), but otherwise is left unchanged. At test time, we sample from \u03b8 \u223c p(\u03b8|x tr i , y tr i ) by first taking gradient steps on log p(y tr i |x tr i , \u03b8 current ), where \u03b8 current is initialized at \u00b5 \u03b8 , and then adding noise with variance \u03c3 2 \u03b8 . Then, we proceed as before, performing MAP inference on \u03c6 i by taking additional gradient steps on log p(y tr i |x tr i , \u03b8 current ) initialized at the sample \u03b8. In our experiments, we find that this more expressive distribution often leads to better performance.",
        "Experiments": "The goal of our experimental evaluation is to answer the following questions: (1) can our approach enable sampling from the distribution over potential functions underlying the training data?, (2) does our approach improve upon the MAML algorithm when there is ambiguity over the class of functions?, and (3) can our approach scale to deep convolutional networks? We study two illustrative toy examples and a realistic ambiguous few-shot image classification problem. For the both experimental domains, we compare MAML to our probabilistic approach. We will refer to our version of MAML as a PLATIPUS (Probabilistic LATent model for Incorporating Priors and Uncertainty in few-Shot learning), due to its unusual combination of two approximate inference methods: amortized inference and MAP. Both PLATIPUS and MAML use the same neural network architecture and the same number of inner gradient steps. We additionally provide a comparison on the MiniImagenet benchmark and specify the hyperparameters in the supplementary appendix.Illustrative 5-shot regression. In this 1D regression problem, different tasks correspond to different underlying functions. Half of the functions are sinusoids, and half are lines, such that the task distribution is clearly multimodal. The sinusoids have amplitude and phase uniformly sampled from the range [0.1, 5] and [0, \u03c0], and the lines have the slope and intercept sampled in the range [-3, 3]. The input domain is uniform on [-5, 5], and Gaussian noise with a standard deviation of 0.3 is added to the labels. We trained both MAML and PLATIPUS for 5-shot regression. In Figure 2, we show the qualitative performance of both methods, where the ground truth underlying function is shown in gray and the datapoints in D tr are shown as purple triangles. We show the function f \u03c6i learned by MAML in black. For PLATIPUS, we sample 10 sets of parameters from p(\u03c6 i |\u03b8) and plot the resulting functions in different colors. In the top row, we can see that PLATIPUS allows the model to effectively reason over the set of functions underlying the provided datapoints, with increased variance in parts of the function where there is more uncertainty. Further, we see that PLATIPUS is able to capture the multimodal structure, as the curves are all linear or sinusoidal.A particularly useful application of uncertainty estimates in few-shot learning is estimating when more data would be helpful. In particular, seeing a large variance in a particular part of the input space suggests that more data would be helpful for learning the function in that part of the input space. On the bottom of Figure 2, we show the results for a single task at meta-test time with increasing numbers of training datapoints. Even though the model was only trained on training set sizes of 5 datapoints, we observe that PLATIPUS is able to effectively reduce its uncertainty as more and more datapoints are available. This suggests that the uncertainty provided by PLATIPUS can be used for approximately gauging when more data would be helpful for learning a new task.  respectively. Following Grant et al.  #b12 , we train both MAML and PLATIPUS with D tr consisting of a single positive example and D test consisting of both positive and negative examples. We plot the results using the same scheme as before, except that we plot the decision boundary (rather than the regression function) and visualize the single positive datapoint with a green plus. As seen in Figure 3, we see that PLATIPUS captures a broad distribution over possible decision boundaries, all of which are roughly circular. MAML provides a single decision boundary of average size.Ambiguous image classification. The ambiguity illustrated in the previous settings is common in real world tasks where images can share multiple attributes. We study an ambiguous extension to the celebA attribute classification task. Our meta-training dataset is formed by sampling two attributes at random to form a positive class and taking the same number of random examples without either attribute to from the negative classes. To evaluate the ability to capture multiple decision boundaries while simultaneously obtaining good performance, we evaluate our method as follows: We sample from a test set of three attributes and a corresponding set of images with those attributes. Since the tasks involve classifying images that have two attributes, this task is ambiguous, and there are three possible combinations of two attributes that explain the training set. We sample models from our prior as described in Section 4 and assign each of the sampled models to one of the three possible tasks based on its log-likelihood. If each of the three possible tasks is assigned a nonzero number of samples, this means that the model effectively covers all three possible modes that explain the ambiguous training set. We can measure coverage and accuracy from this protocol. The coverage score indicates the average number of tasks (between 1 and 3) that receive at least one sample for each ambiguous training set, and the accuracy score is the average number of correct classifications on these tasks (according to the sampled models assigned to them). A highly random method will achieve good coverage but poor accuracy, while a deterministic method will have a coverage of 1.Our results are summarized in Table 5 and Fig. 4. The accuracy of our method is comparable to standard, deterministic MAML. However, the deterministic algorithm only ever captures one mode for each ambiguous task, where the maximum is three. Our method on average captures between two and three modes. The qualitative analysis in Figure 4   6 Discussion and Future WorkWe introduced an algorithm for few-shot meta-learning that enables simple and effective sampling of models for new tasks at meta-test time. Our algorithm, PLATIPUS, adapts to new tasks by running gradient descent with injected noise. During meta-training, the model parameters are optimized with respect to a variational lower bound on the likelihood for the meta-training tasks, so as to enable this simple adaptation procedure to produce approximate samples from the model posterior when conditioned on a few-shot training set. This approach has a number of benefits. The adaptation procedure is exceedingly simple, and the method can be applied to any standard model architecture.The algorithm introduces a modest number of additional parameters: besides the initial model weights, we must learn a variance on each parameter for the inference network and prior, and the number of parameters scales only linearly with the number of model weights. Our experimental results show that our method can be used to effectively sample diverse solutions to both regression and classification tasks at meta-test time, including for task families that have multi-modal task distributions.Although our approach is simple and broadly applicable, it has a number of potential limitations that could be addressed in future work. First, the current form of the method provides a relatively impoverished estimator of posterior variance, which might be less effective at gauging uncertainty in settings where different tasks have very different degrees of ambiguity. In these cases, finding a way to make the variance dependent on the few-shot training set might produce better results, and investigating how to do this without adding a large number of additional parameters would be an interesting direction for future work. Another exciting direction for future research would be to study how our approach could be applied in settings where ambiguity and uncertainty can directly guide data acquisition, so as to devise better few-shot active learning and reinforcement learning algorithms.MiniImagenet 5-way, 1-shot Accuracy MAML  #b7  48.70 \u00b1 1.84% LLAMA  #b13  49.40 \u00b1 1.83% Reptile  #b27  49.97 \u00b1 0.32% PLATIPUS (ours) 50.13 \u00b1 1.86% Meta-SGD  #b23  50.71 \u00b1 1.87% matching nets  #b37  43.56 \u00b1 0.84% meta-learner LSTM  #b28  43.44 \u00b1 0.77% SNAIL  #b25 * 45.10 \u00b1 0.00% prototypical networks  #b34  46.61 \u00b1 0.78% mAP-DLM  #b34  49.82 \u00b1 0.78% GNN  #b11  50.33 \u00b1 0.36% Relation Net  #b35  50.44 \u00b1 0.82% Table 2: Comparison between our approach and prior MAML-based methods (top), and other prior few-shot learning techniques on the 5-way, 1-shot MiniImagenet benchmark. Our approach gives a small boost over MAML, and is comparable to other approaches. We bold the approaches that are above the highest confidence interval lower-bound. *Accuracy using comparable network architecture."
    },
    {
        "2": "In practice, we can use multiple gradient steps for the mean, but we omit this for notational simplicity.",
        "3": "Additional qualitative results can be found at https://sites.google.com/view/probabilistic-maml/"
    },
    {
        "b0": [
            "Ensemble learning for multi-layer networks",
            "",
            "",
            "",
            "Barber",
            "Bishop"
        ],
        "b1": [
            "",
            "",
            "Weight uncertainty in neural networks",
            ""
        ],
        "b2": [
            "Structure learning in action",
            "",
            "",
            "",
            "Braun",
            "Mehring",
            "Wolpert"
        ],
        "b3": [
            "Bayesian multitask learning with latent hierarchies",
            "",
            "",
            "",
            "Daum\u00e9"
        ],
        "b4": [
            "",
            "",
            "Rl \u0398 2: Fast reinforcement learning via slow reinforcement learning",
            ""
        ],
        "b5": [
            "Towards a neural statistician",
            "",
            "",
            "",
            "Edwards",
            "Storkey"
        ],
        "b6": [
            "A Bayesian approach to unsupervised one-shot learning of object categories",
            "",
            "",
            "",
            "Fei-Fei"
        ],
        "b7": [
            "",
            "",
            "Meta-learning and universality: Deep representations and gradient descent can approximate any learning algorithm",
            ""
        ],
        "b8": [
            "Model-agnostic meta-learning for fast adaptation of deep networks",
            "",
            "",
            "",
            "Finn",
            "Abbeel",
            "Levine"
        ],
        "b9": [
            "",
            "",
            "One-shot visual imitation learning via meta-learning",
            ""
        ],
        "b10": [
            "Knowledge transfer via multiple model local structure mapping",
            "",
            "",
            "",
            "Gao",
            "Fan",
            "Jiang",
            "Han"
        ],
        "b11": [
            "",
            "",
            "Few-shot learning with graph neural networks",
            ""
        ],
        "b12": [
            "Concept acquisition through meta-learning",
            "",
            "",
            "",
            "Grant",
            "Finn",
            "Peterson",
            "Abbott",
            "Levine",
            "Darrell",
            "Griffiths"
        ],
        "b13": [
            "Recasting gradient-based meta-learning as hierarchical bayes",
            "",
            "",
            "",
            "Grant",
            "Finn",
            "Levine",
            "Darrell",
            "Griffiths"
        ],
        "b14": [
            "Practical variational inference for neural networks",
            "",
            "",
            "",
            "Graves"
        ],
        "b15": [
            "Keeping the neural networks simple by minimizing the description length of the weights",
            "",
            "",
            "",
            "Hinton",
            "Van Camp"
        ],
        "b16": [
            "Learning to learn using gradient descent",
            "",
            "",
            "",
            "Hochreiter",
            "Younger",
            "Conwell"
        ],
        "b17": [
            "Stochastic variational inference",
            "",
            "",
            "",
            "Hoffman",
            "Blei",
            "Wang",
            "Paisley"
        ],
        "b18": [
            "Composing graphical models with neural networks for structured representations and fast inference",
            "",
            "",
            "",
            "Johnson",
            "Duvenaud",
            "Wiltschko",
            "Adams",
            "Datta"
        ],
        "b19": [
            "",
            "",
            "Auto-encoding variational bayes",
            ""
        ],
        "b20": [
            "",
            "",
            "",
            ""
        ],
        "b21": [
            "Human-level concept learning through probabilistic program induction",
            "",
            "",
            "",
            "Lake",
            "Salakhutdinov",
            "Tenenbaum"
        ],
        "b22": [
            "Learning to learn with the informative vector machine",
            "",
            "",
            "",
            "Lawrence",
            "Platt"
        ],
        "b23": [
            "",
            "",
            "Meta-sgd: Learning to learn quickly for few shot learning",
            ""
        ],
        "b24": [
            "A practical Bayesian framework for backpropagation networks",
            "",
            "",
            "",
            "Mackay"
        ],
        "b25": [
            "A simple neural attentive meta-learner",
            "",
            "",
            "",
            "Mishra",
            "Rohaninejad",
            "Chen",
            "Abbeel"
        ],
        "b26": [
            "",
            "",
            "Bayesian learning for neural networks",
            ""
        ],
        "b27": [
            "",
            "",
            "Reptile: a scalable metalearning algorithm",
            ""
        ],
        "b28": [
            "Optimization as a model for few-shot learning",
            "",
            "",
            "",
            "Ravi",
            "Larochelle"
        ],
        "b29": [
            "",
            "",
            "Stochastic backpropagation and approximate inference in deep generative models",
            ""
        ],
        "b30": [
            "Meta-learning with memory-augmented neural networks",
            "",
            "",
            "",
            "Santoro",
            "Bartunov",
            "Botvinick",
            "Wierstra",
            "Lillicrap"
        ],
        "b31": [
            "Equivalence of regularization and truncated iteration for general ill-posed problems",
            "",
            "",
            "",
            "Santos"
        ],
        "b32": [
            "",
            "",
            "Evolutionary principles in self-referential learning",
            ""
        ],
        "b33": [
            "",
            "",
            "Amortized inference regularization",
            ""
        ],
        "b34": [
            "Prototypical networks for few-shot learning",
            "",
            "",
            "",
            "Snell",
            "Swersky",
            "Zemel"
        ],
        "b35": [
            "",
            "",
            "Learning to compare: Relation network for few-shot learning",
            "http://arxiv.org/abs/1711.06025"
        ],
        "b36": [
            "",
            "",
            "A Bayesian framework for concept learning",
            ""
        ],
        "b37": [
            "Matching networks for one shot learning",
            "",
            "",
            "",
            "Vinyals",
            "Blundell",
            "Lillicrap",
            "Wierstra"
        ],
        "b38": [
            "Sparse Bayesian multi-task learning for predicting cognitive outcomes from neuroimaging measures in Alzheimer's disease",
            "",
            "",
            "",
            "Wan",
            "Zhang",
            "Yan",
            "Li",
            "Rao",
            "Fang",
            "Kim",
            "Risacher",
            "Saykin",
            "Shen"
        ],
        "b39": [
            "Learning to learn: Model regression networks for easy small sample learning",
            "",
            "",
            "",
            "Wang",
            "Hebert"
        ],
        "b40": [
            "Learning Gaussian processes from multiple tasks",
            "",
            "",
            "",
            "Yu",
            "Tresp",
            "Schwaighofer"
        ]
    },
    {
        "tab_2": "Table 1 :1Our method covers significantly more tasks than MAML, with comparable accuracy. MAML + noise is a method that simply adds noise to the gradient, but does not explicitly perform variational inference. This still improves coverage, but results in a large drop in accuracy.Ambiguous celebA (5-shot) Accuracy Coverage (max=3) 69.26 \u00b1 2.18% 1.00 \u00b1 0.0 54.73 \u00b1 0.8 % 2.60 \u00b1 0.12 PLATIPUS (ours) 69.97 \u00b1 1.32 % MAML MAML + noise 2.62 \u00b1 0.11"
    }
]